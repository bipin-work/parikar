// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  savedRecipes  SavedRecipe[]
  sharedRecipes SharedRecipe[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  ratings       Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  image       String?
  createdAt   DateTime @default(now())
  recipes     Recipe[]
}

model Recipe {
  id              String   @id @default(cuid())
  title           String
  description     String?
  instructions    String
  prepTime        Int? // in minutes
  cookTime        Int? // in minutes
  servings        Int?
  difficulty      Difficulty @default(MEDIUM)
  image           String?
  images          String[] // Additional images
  source          String? // URL if extracted from web
  sourceType      SourceType @default(MANUAL)
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  
  ingredients  Ingredient[]
  tags         RecipeTag[]
  ratings      Rating[]
  savedBy      SavedRecipe[]
  sharedWith   SharedRecipe[]

  @@index([authorId])
  @@index([categoryId])
  @@index([isPublic])
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  amount   String
  unit     String?
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  slug    String      @unique
  recipes RecipeTag[]
}

model RecipeTag {
  recipeId String
  tagId    String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([recipeId, tagId])
}

model Rating {
  id       String @id @default(cuid())
  value    Int    @db.SmallInt // 1-5 stars
  comment  String?
  recipeId String
  userId   String
  createdAt DateTime @default(now())

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([recipeId])
}

model SavedRecipe {
  id       String   @id @default(cuid())
  userId   String
  recipeId String
  savedAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
}

model SharedRecipe {
  id       String   @id @default(cuid())
  fromUserId String
  toUserId   String
  recipeId   String
  message    String?
  sharedAt   DateTime @default(now())
  isRead     Boolean  @default(false)

  fromUser User   @relation(fields: [fromUserId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([toUserId])
  @@index([fromUserId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SourceType {
  MANUAL
  BLOG
  YOUTUBE
  AI_GENERATED
}
