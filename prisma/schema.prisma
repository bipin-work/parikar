// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "sqlite" for development
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
   password      String?
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  recipes   Recipe[]
  accounts  Account[]
  sessions  Session[]
  reviews   Review[]
  favorites Favorite[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String?
  imageUrl     String?
  cookTime     Int?     // in minutes
  prepTime     Int?     // in minutes
  servings     Int?
  difficulty   String?  // "Easy", "Medium", "Hard"
  cuisine      String?  // "Italian", "Asian", etc.
  public       Boolean  @default(false)
  featured     Boolean  @default(false) // for highlighting popular recipes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Foreign keys
  userId       String
  categoryId   String?
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id])
  ingredients  Ingredient[]
  instructions Instruction[]
  nutritionInfo NutritionInfo?
  tags         RecipeTag[]
  reviews      Review[]
  favorites    Favorite[]
  
  // Indexes for better query performance
  @@index([userId])
  @@index([public])
  @@index([categoryId])
  @@index([createdAt])
  @@map("recipes")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  
  recipes   Recipe[]
  
  @@map("categories")
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  amount   Float
  unit     String // "cup", "tbsp", "g", "kg", etc.
  notes    String? // e.g., "chopped", "diced"
  order    Int    @default(0) // for display ordering
  
  // Foreign key
  recipeId String
  
  // Relations
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@index([recipeId])
  @@map("ingredients")
}

model Instruction {
  id          String @id @default(cuid())
  step        Int
  instruction String @db.Text
  imageUrl    String? // optional step image
  
  // Foreign key
  recipeId    String
  
  // Relations
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, step]) // ensure unique step numbers per recipe
  @@index([recipeId])
  @@map("instructions")
}

model NutritionInfo {
  id           String @id @default(cuid())
  calories     Int?
  protein      Float? // in grams
  carbs        Float? // in grams
  fat          Float? // in grams
  fiber        Float? // in grams
  sugar        Float? // in grams
  sodium       Float? // in mg
  
  // Foreign key
  recipeId     String @unique
  
  // Relations
  recipe       Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@map("nutrition_info")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  
  recipes   RecipeTag[]
  
  @@map("tags")
}

model RecipeTag {
  recipeId String
  tagId    String
  
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([recipeId, tagId])
  @@map("recipe_tags")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign keys
  userId    String
  recipeId  String
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recipeId]) // one review per user per recipe
  @@index([recipeId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String
  recipeId  String
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recipeId]) // one favorite per user per recipe
  @@index([userId])
  @@map("favorites")
}